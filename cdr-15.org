#+title: Package-Local Nicknames
#+author: Gleefre
#+email: varedif.a.s@gmail.com

#+description: This is a CDR specification for package-local nicknames.
#+language: en
#+created: [2023-06-12 Mon]

[THIS IS A DRAFT]

* ISSUES
  :PROPERTIES:
  :CUSTOM_ID: issues
  :END:
  #+INCLUDE: "./issues/1.org"
  [[./issues/1.org][Issue 1]]
  #+INCLUDE: "./issues/2.org"
  [[./issues/2.org][Issue 2]]
  #+INCLUDE: "./issues/3.org"
  [[./issues/3.org][Issue 3]]
  #+INCLUDE: "./issues/4.org"
  [[./issues/4.org][Issue 4]]
  #+INCLUDE: "./issues/5.org"
  [[./issues/5.org][Issue 5]]
  #+INCLUDE: "./issues/6.org"
  [[./issues/6.org][Issue 6]]
  #+INCLUDE: "./issues/7.org"
  [[./issues/7.org][Issue 7]]
  #+INCLUDE: "./issues/8.org"
  [[./issues/8.org][Issue 8]]
* Introduction
  This is a specification for package-local nicknames extension in Common Lisp.
** Rationale
   Package-local nicknames allow to use short and easy-to-use names without
   potentially introducing name conflict as with normal nicknames.
** Current state
   Package-local nicknames are implemented (at least partially) in =SBCL=,
   =CCL=, =ECL=, =Clasp=, =ABCL=, =Allegro CL=, =LispWorks=. Unfortunately,
   there are multiple inconsistencies between implementations, and all
   implementations lose *print-read* consistency to some extent.
** Goal
   The purpose of this document is to standardize the package-local nicknames
   extension and to address some existing issues (mostly *print-read*
   consistency).

   [TODO]

   This CDR also aims to provide an extensive test suite for this extension.
* Specification
** Description
*** Concept
    /Package-local nickname/ (or /local nickname/) has the same effects as a
    normal /package nickname/ (later /global nickname/), except that these
    effects only apply when ~*package*~ is bound to a package for which the
    nickname has been defined.

    That means that calls to ~find-package~ with a /local nickname/ defined in
    the /current package/ should return the package nicknamed by this nickname.

    This also affects all implied calls to ~find-package~, including those
    performed by the lisp reader.

    In addition, to maintain *print-read* consistency, the lisp printer is
    affected by /local nicknames/ defined in the /current package/, for details
    see [[#print-read-consistency][PRINT-READ consistency]].

    /Local nickname/ is allowed to shadow a /package name/ or a /global
    nickname/, except for the names ~#:CL~, ~#:COMMON-LISP~ and ~#:KEYWORD~
    which should always refer to their packages.
*** API
-----
**** defpackage
     :PROPERTIES:
     :CUSTOM_ID: defpackage
     :END:

     ~defpackage~ options are extended to include /local-nicknames-option/:
     : local-nicknames-option ::= (:local-nicknames (nickname package)*)

     Each pair specifies a /local nickname/ ~nickname~ for the corresponding
     ~package~.

     This option may appear more than once.
***** Arguments and Values:
      ~nickname~ must be a /string designator/.

      ~package~ must be a /package designator/.
***** Exceptional situations
      An error of type ~package-error~ is signaled when a package designated by
      ~package~ does not exists.

      Name conflict errors are handled by the underlying calls to
      ~add-package-local-nickname~.

      See [[#exceptional-situations-2][add-package-local-nickname: exceptional situations]].
***** Implementation dependent
      The behaviour is unspecified when a /local nickname/ is specified for the
      package that is being defined.

      The behaviour is unspecified when supplied /local nicknames/ are at
      variance with the current state of the package that is being defined. An
      implementation might choose to remove all present /local nicknames/ at the
      begining of each redefinition of the package.

      [TODO: What happens when a package is redefined with local
      nicknames in other packages that it is nicknamed by? It probably
      can't be strictly defined since redefining package is
      implementation dependent... But seems like they must be left
      intact.]
-----
**** make-package
     :PROPERTIES:
     :CUSTOM_ID: make-package
     :END:
     [[#proposal-6][Proposal#6]]

     ~make-package~ lambda list is extended to include an additional key
     parameter: ~local-nicknames~.
     : local-nicknames ::= ((nickname package)*)

     ~local-nicknames~ defaults to an /empty list/.

     ~local-nicknames~ must be a /list/ each element of which must be a /list/
     of form ~(nickname package)~. Specifies /local nicknames/ in the new
     /package/.
***** Arguments and Values:
      ~local-nicknames~ must be a a /list/ of pairs ~(nickname package)~.

      ~nickname~ must be a /string designator/.

      ~package~ must be a /package designator/.
***** Exceptional situations
      An error of type ~package-error~ is signaled when a package designated by
      ~package~ does not exists.

      Name conflict errors are handled by the underlying calls to
      ~add-package-local-nickname~.

      See [[#exceptional-situations-2][add-package-local-nickname: exceptional situations]].
***** Implementation dependent
      The behaviour is unspecified when a /local nickname/ is specified for the
      package that is being defined.
-----
**** add-package-local-nickname
     : (add-package-local-nickname nickname actual-package &optional designated-package)
     :   => designated-package-object
     ~designated-package~ defaults to the /current package/.

     Adds a /package-local nickname/ ~nickname~ for the ~actual-package~ in the
     ~designated-package~.

     Returns the package designated by ~designated-package~.

     If a /nickname/ is already defined, checks that it is defined for the
     package designated by ~actual-package~.
***** Arguments and Values
      ~nickname~ must be a /string designator/.

      ~actual-package~ and ~designated-package~ must be /package designators/.

      ~designated-package-object~ is of type /package/.
***** Exceptional situations
      :PROPERTIES:
      :CUSTOM_ID: exceptional-situations-2
      :END:

      If a package designated by ~actual-package~ or a package designated by
      ~designated-package~ does not exists, an error of type /package-error/
      must be signaled.

      If ~nickname~ is one of the names ~#:CL~, ~#:COMMON-LISP~ or ~#:KEYWORD~,
      an error of type /package-error/ must be signaled.

      If ~nickname~ is a /local nickname/ for a package different from
      ~actual-package~, an error of type /package-error/ must be signaled.
***** Implementation dependent
      *PROPOSAL* (See [[#issues][issues#4]].)

      If ~nickname~ shadows the ~designated-package~'s /package name/ or one of
      its /global nicknames/, a style warning might signaled.
-----
**** remove-package-local-nickname
     : (remove-package-local-nickname old-nickname &optional designated-package)
     :   => nickname-removed-p
     ~designated-package~ defaults to the /current package/.

     If ~designated-package~ has ~old-nickname~ as a /local nickname/, it is
     removed.

     Returns /true/ if the ~old-nickname~ existed (and was removed), and ~NIL~
     otherwise.
***** Arguments and Values
      ~old-nickname~ must be a /string designator/.

      ~designated-package~ must be a /package designator/.

      ~nickname-removed-p~ is a /generalized boolean/.
***** Exceptional situations
      If a package designated by ~designated-package~ does not exists, an error of
      type /package-error/ must be signaled.
-----
**** package-local-nicknames
     : (package-local-nicknames package)
     :   => local-nicknames-alist
     Returns an /alist/ describing local nicknames defined in a package
     designated by ~package~.

     Each cons cell in ~local-nicknames-alist~ is of the form ~(nickname . package)~
     where ~nickname~ is of type /string/ and ~package~ is of type
     /package/.
***** Arguments and Values
      ~package~ must be a /package designator/.

      ~local-nicknames-alist~ is an /alist/ with keys of type /string/ and
      values of type /package/.
***** Exceptional situations
      An error of type ~package-error~ is signaled when a package designated by
      ~package~ does not exists.
***** Notes
      The returned /alist/ must be safe to be modified by the user.
-----
**** package-locally-nicknamed-by-list
     : (package-locally-nicknamed-by-list package)
     :   => packages-list
     Returns a /list/ of packages that have a /local nickname/ defined for the
     package designated by ~package~.
***** Arguments and Values
      ~package~ must be a /package designator/.

      ~packages-list~ is a /list/ with elements of type /package/.
***** Exceptional situations
      An error of type ~package-error~ is signaled when a package designated by
      ~package~ does not exists.
***** Notes
      The returned /list/ must be safe to be modified by the user.
-----
*** Affected symbols
-----
**** defpackage
     See [[#defpackage][defpackage]].
-----
**** make-package
     See [[#make-package][make-package]].
-----
**** find-package
     When argument to ~find-package~ is a /local nickname/ that is defined in
     the /current package/, returns the package corresponding to this nickname.

     This also affects all implied calls to ~find-package~, including but not
     limited to those performed by the lisp reader as well as those performed by
     ~export~, ~find-symbol~, ~import~, ~rename-package~, ~shadow~,
     ~shadowing-import~, ~delete-package~, ~with-package-iterator~, ~unexport~,
     ~unintern~, ~in-package~, ~unuse-package~, ~use-package~, ~do-symbols~,
     ~do-external-symbols~, ~do-all-symbols~, ~intern~, ~package-name~,
     ~package-nicknames~, ~package-shadowing-symbols~, ~package-use-list~,
     ~package-used-by-list~.

     ~add-package-local-nickname~, ~remove-package-local-nickname~,
     ~package-local-nicknames~ and ~package-locally-nicknamed-by~ are also
     affected.

     There are two exceptions: ~make-package~ and ~defpackage~ must *not* be
     affected by /local nicknames/ of the /current package/.
-----
**** rename-package
     When a package is renamed via ~rename-package~ it maintains all /local
     nicknames/ it is nicknamed by, as well as all /local nicknames/ it has
     defined.
***** Implementation dependent
      *PROPOSAL* (See [[#issues][issues#4]].)

      If a /new-name/ or one of /new-nicknames/ is shadowed by one of the /local
      nicknames/ of the package being redefined, a warning might be signaled.
-----
**** delete-package
     When a package is deleted via ~delete-package~ all /local nicknames/
     defined in other packages that it was nicknamed by must be removed as well
     as all /local nicknames/ defined in the package that is being deleted.

     This also means that this package must not be available by calls to
     ~package-locally-nicknamed-by-list~ and ~package-local-nicknames~.
-----
*** ~*FEATURES*~
    If an implementation supports package-local nicknames it should add symbols
    ~:package-local-nicknames~ and ~:cdr-15~ (per CDR 14) to ~*features*~.
** Examples
   [TODO]
* Links
  3b's [[https://github.com/3b/package-local-nicknames/blob/master/docs.org][notes]] on package-local nicknames.

  phoe's [[https://github.com/phoe/trivial-package-local-nicknames][tests]].

  SBCL's [[https://www.sbcl.org/manual/#Package_002dLocal-Nicknames][manual entry]].
* Copying and License
  [TODO]
